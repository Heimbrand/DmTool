@page "/dice"
<h3>Dices</h3>



<MudGrid Style="margin: 10px;">
    <MudCard>
        <MudCardContent>
            <MudButton OnClick="RollD20" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">D20</MudButton>
            <MudButton OnClick="RollD12" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">D12</MudButton>
            <MudButton OnClick="RollD10" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">D10</MudButton>
            <MudButton OnClick="RollD8" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">D8</MudButton>
            <MudButton OnClick="RollD6" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">D6</MudButton>
            <MudButton OnClick="RollD4" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">D4</MudButton>
            <MudButton OnClick="RollD100" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">D100</MudButton>
            <MudButton OnClick="ClearResults" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Clear results</MudButton>
        </MudCardContent>
    </MudCard>
</MudGrid>


@if (rollResult.HasValue)
{
    <MudGrid Style="margin: 10px;" Justify="Justify.SpaceBetween">
        <MudCard>
            <MudCardContent>
                <MudText>Current roll: @rollResult</MudText>
            </MudCardContent>
        </MudCard>
        

    </MudGrid>
}
<MudGrid Style="margin: 10px;">
    <MudCard>
        <MudCardContent>

            @if (results.Count > 0)
            {
                <MudText>Roll history</MudText>
                @foreach (var result in results)
                {
                    <MudText>@result.Key</MudText>
                    @foreach (var roll in result.Value.AsEnumerable().Reverse())
                    {
                        <MudText>Previous rolls: @roll</MudText>
                    }
                }
            }
            else
            {
                <MudText>Roll history is empty</MudText>
            }

        </MudCardContent>
    </MudCard>
</MudGrid>






@code {

    private int? rollResult;
    private Dictionary<string, List<int>> results = new();

    private void RollD20() => rollResult = D20Roll();
    private void RollD12() => rollResult = D12Roll();
    private void RollD10() => rollResult = D10Roll();
    private void RollD8() => rollResult = D8Roll();
    private void RollD6() => rollResult = D6Roll();
    private void RollD4() => rollResult = D4Roll();
    private void RollD100() => rollResult = D100Roll();
    private void ClearResults() => rollResult = ClearResult();

    private int D20Roll()
    {
        Random rnd = new Random();
        int roll = rnd.Next(1, 21);
        string key = "D20";
        AddRollToResults(key, roll);

        return roll;
    }
    private int D12Roll()
    {
        Random rnd = new Random();
        int roll = rnd.Next(1, 13);
        string key = "D12";
        AddRollToResults(key, roll);
        return roll;
    }
    private int D10Roll()
    {
        Random rnd = new Random();
        int roll = rnd.Next(1, 11);
        string key = "D10";
        AddRollToResults(key, roll);
        return roll;
    }
    private int D8Roll()
    {
        Random rnd = new Random();
        int roll = rnd.Next(1, 9);
        string key = "D8";
        AddRollToResults(key, roll);
        return roll;
    }
    private int D6Roll()
    {
        Random rnd = new Random();
        int roll = rnd.Next(1, 7);
        string key = "D6";
        AddRollToResults(key, roll);
        return roll;
    }
    private int D4Roll()
    {
        Random rnd = new Random();
        int roll = rnd.Next(1, 5);
        string key = "D4";
        AddRollToResults(key, roll);
        return roll;
    }
    private int D100Roll()
    {
        Random rnd = new Random();
        int roll = rnd.Next(1, 101);
        string key = "D100";
        AddRollToResults(key, roll);
        return roll;
    }
    private int ClearResult()
    {
        results.Clear();
        return 0;
    }

    private void AddRollToResults(string key, int roll)
    {
        if (!results.ContainsKey(key))
        {
            results[key] = new List<int>();
        }
        results[key].Add(roll);
    }
}