@page "/characters"
@inject CharacterRepository context

@using DmTool.Efc.Sql
@using DmTool.Efc.Sql.Entities
@using DmTool.Efc.Sql.Repositories
@using Microsoft.EntityFrameworkCore

<PageTitle>Characters</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Characters</MudText>

@foreach (var character in AllChracters)
{
    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem Style="border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); width: 450px; height: 450px; margin: 10px">
            <MudCard>
                <MudCardContent>
                    <MudImage Src="@character.Portrait" Alt="Character Portrait" Height="200" Width="150" />
                    <MudText Typo="Typo.h5" Class="ml-3 black-text">Name: @character.Name</MudText>
                    <MudText Typo="Typo.h5" Class="ml-3 black-text">Race: @character.Race</MudText>
                    <MudText Typo="Typo.h5" Class="ml-3 black-text">Level: @character.Level</MudText>
                    <MudText Typo="Typo.h5" Class="ml-3 black-text">Experience: @character.Experience</MudText>
                    <MudText Typo="Typo.h5" Class="ml-3 black-text">Notes: @character.Notes</MudText>
                    <MudText Typo="Typo.h5" Class="ml-3 black-text">Alignment: @character.Alignment</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem Style="border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); margin: 15px;">
            <EditForm Model="@character" OnValidSubmit="() => OnValidEditSubmit(character)">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Label="Name" 
                                              @bind-Value="character.Name" For="@(() => character.Name)" />
                                <MudTextField Label="Race" Class="mt-3"
                                              @bind-Value="character.Race" For="@(() => character.Race)" />
                                <MudTextField Label="Level" Class="mt-3"
                                              @bind-Value="character.Level" For="@(() => character.Level)" />
                                <MudTextField Label="Experience" Class="mt-3"
                                              @bind-Value="character.Experience" For="@(() => character.Experience)" />
                                <MudTextField Label="Notes" Class="mt-3"
                                              @bind-Value="character.Notes" For="@(() => character.Notes)" />
                                <MudTextField Label="Alignment" Class="mt-3"
                                              @bind-Value="character.Alignment" For="@(() => character.Alignment)" />
                               
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Edit</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="5">
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                            @if (success)
                            {
                                <MudText Color="Color.Success">Success</MudText>
                            }
                            else
                            {
                                <MudText Color="@Color.Error">
                                    <ValidationSummary />
                                </MudText>
                            }
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2" Align="Align.Center">
                            Validation Summary kommer berätta om det gick bra eller åt skogen=)
                        </MudText>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudItem>
        <MudItem>
            <MudCard Style="width: 500px; height: 450px; background-image: url('/Images/Parchment.png'); background-repeat: no-repeat; border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); margin: 15px; ">
                <MudCardContent>
                    @if (character.Items is null || !character.Items.Any())
                    {
                        <MudText Typo="Typo.h5" Class="ml-3 black-text">@character.Name has no items</MudText>
                    }
                    else
                    {
                        foreach (var item in character.Items)
                        {
                            <MudText Typo="Typo.h5" Class="ml-3 black-text">Name: @character.Items</MudText>
                        }   
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}
<MudItem Style="border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); margin: 15px;">
    <EditForm Model="@character" OnValidSubmit="() => OnValidAddSubmit(character)">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Name"
                                      @bind-Value="character.Name" For="@(() => character.Name)" />
                        <MudTextField Label="Level" Class="mt-3"
                                      @bind-Value="character.Level" For="@(() => character.Level)" />
                        <MudTextField Label="Experience" Class="mt-3"
                                      @bind-Value="character.Experience" For="@(() => character.Experience)" />
                        <MudTextField Label="Notes" Class="mt-3"
                                      @bind-Value="character.Notes" For="@(() => character.Notes)" />
                        <MudTextField Label="Portrait" HelperText="Write in this format: /Images/NameOfPic.png/jpeg" Class="mt-3"
                                      @bind-Value="character.Portrait" For="@(() => character.Portrait)" />

                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="5">
                <MudPaper Class="pa-4 mud-height-full">
                    <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                    @if (success)
                    {
                        <MudText Color="Color.Success">Success</MudText>
                    }
                    else
                    {
                        <MudText Color="@Color.Error">
                            <ValidationSummary />
                        </MudText>
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">
                    Validation Summary kommer berätta om det gick bra eller åt skogen=)
                </MudText>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudItem>

@code
{
    bool success;
    private List<Character> AllChracters = new();
    Character character = new Character();

    private async Task OnValidEditSubmit(Character character)
    {
        success = true;
        character.Modified = DateTime.UtcNow;
        await context.UpdateAsync(character);
        StateHasChanged();

    }
    private async Task OnValidAddSubmit(Character character)
    {
        success = true;
        character.Created = DateTime.UtcNow;
        await context.AddAsync(character);
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        var allCharacters = await context.GetAllAsync();
        AllChracters.AddRange(allCharacters);
    }
}