@page "/"
@using DmTool.Efc.Sql.Entities
@using DmTool.Efc.Sql.Repositories
@inject CharacterRepository context
@inject DateTrackerRepository dateTrackerContext


<PageTitle>Home</PageTitle>


<MudCarousel Class="mud-width-full" Style="height:300px; margin:10px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
    @foreach (var character in characters)
    {
        <MudCarouselItem Transition="transition">
            <MudGrid>
                <MudCard Style="padding: 10px; margin: 5px; border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);">
                    <MudCardContent>
                        <MudImage Src="@character.Portrait" Alt="Character Portrait" Style="width: 250px; height: 200px;"></MudImage>
                    </MudCardContent>
                </MudCard>
                <MudCard Style="padding: 10px; margin: 5px; border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);">
                    <MudCardContent>
                        <MudText Style="margin: 5px; font-size: 14px;">Name: @character.Name</MudText>
                        <MudText Style="margin: 5px; font-size: 14px;">Name: @character.Race</MudText>
                        <MudText Style="margin: 5px; font-size: 14px;">Alignment: @character.Alignment</MudText>
                        <MudText Style="margin: 5px; font-size: 14px;">Level: @character.Level</MudText>
                        <MudText Style="margin: 5px; font-size: 14px;">Experience: @character.Experience</MudText>
                        <MudText Style="margin: 5px; font-size: 14px;">Notes: @character.Notes</MudText>
                    </MudCardContent>
                </MudCard>

            </MudGrid>

        </MudCarouselItem>
    })
</MudCarousel>
<MudSelect @bind-Value="transition" Label="Transition" Class="ma-2">
    <MudSelectItem Value="@Transition.Fade">Fade</MudSelectItem>
    <MudSelectItem Value="@Transition.Slide">Slide</MudSelectItem>
    <MudSelectItem Value="@Transition.None">None</MudSelectItem>
</MudSelect>







<MudGrid Style="margin: 10px;">
    <MudCard Style="margin: 10px; border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);">
        <MudCardContent>
            <MudAlert Severity="Severity.Success">
                MudBlazor templates
                <MudLink Href="https://mudblazor.com" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
                    <b>www.mudblazor.com</b>
                </MudLink>
            </MudAlert>

            <MudAlert Severity="Severity.Success">
                Efraim Malphael Ignatius Lucifron
                <MudLink Href="https://www.dndbeyond.com/characters/133616351" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
                    <b>Dnd Beyond Sheet </b>
                </MudLink>
            </MudAlert>

            <MudAlert Severity="Severity.Success">
                Fred As'Tacos
                <MudLink Href="https://www.dndbeyond.com/characters/134561288" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
                    <b>Dnd Beyond Sheet</b>
                </MudLink>
            </MudAlert>

            <MudAlert Severity="Severity.Success">
                Jizo
                <MudLink Href="https://www.dndbeyond.com/characters/113360171" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
                    <b>Dnd Beyond Sheet</b>
                </MudLink>
            </MudAlert>

            <MudAlert Severity="Severity.Success">
                Kenya sugendees v2
                <MudLink Href="https://www.dndbeyond.com/characters/134668024" Target="_blank" Typo="Typo.body2" Color="Color.Primary">
                    <b>Dnd Beyond Sheet</b>
                </MudLink>
            </MudAlert>
        </MudCardContent>
    </MudCard>

    <MudCard Style="margin: 10px;border-radius: 15px; box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);">
        <MudPaper Style="margin: 10px;">
            @foreach (var dateTracker in _currentDateTracker)
            {
                <MudText>Adventure: @dateTracker.Name</MudText>
                <MudText>Day: @dateTracker.Day</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="() => IncreaseDay(dateTracker)">+</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="() => DecreaseDay(dateTracker)">-</MudButton>
                <MudText>Month: @dateTracker.Month</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="() => IncreaseMonth(dateTracker)">+</MudButton>
                <MudButton Variant="Variant.Text" Color="Color.Error" Size="Size.Small" OnClick="() => DecreaseMonth(dateTracker)">-</MudButton>
                <MudText>Year: @dateTracker.Year</MudText>
            }
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" IconColor="Color.Secondary" Size="Size.Large" OnClick="SaveChanges"></MudButton>
        </MudPaper>


    </MudCard>
</MudGrid>




@code
{
    private List<Character> characters = new();
    private List<DateTracker> _currentDateTracker = new();
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;


    protected override async Task OnInitializedAsync()
    {
        var allCharacters = await context.GetAllAsync();
        characters.AddRange(allCharacters);

        var belFinkoDateTracker = await dateTrackerContext.GetByIdAsync(1);
        _currentDateTracker.Add(belFinkoDateTracker);
    }

    private void IncreaseDay(DateTracker dateTracker)
    {
        dateTracker.Day += 1;
    }

    private void IncreaseMonth(DateTracker dateTracker)
    {
        dateTracker.Month += 1;
    }

    private void DecreaseDay(DateTracker dateTracker)
    {
        dateTracker.Day -= 1;
    }

    private void DecreaseMonth(DateTracker dateTracker)
    {
        dateTracker.Month -= 1;
    }

    private async Task SaveChanges()
    {
        foreach (var dateTracker in _currentDateTracker)
        {
            await dateTrackerContext.UpdateAsync(dateTracker);
        }

    }

}

